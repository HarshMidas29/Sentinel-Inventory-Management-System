/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SIMS.Maintenance;

import dao.ConnectionProvider;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Daham Yakandawala
 */
public class Maintenance_Out_Form extends javax.swing.JFrame {

    /**
     * Creates new form Maintenance_Out_Form
     */
    private String selectedItemId;

    public Maintenance_Out_Form() {
        this("Default Item ID");  // Pass a default or placeholder item ID for testing
    }

    public Maintenance_Out_Form(String itemId) {
        initComponents();
        setLocationRelativeTo(null);
        this.selectedItemId = itemId; // Store the selected item ID
        jLabel11.setText("Selected Item ID: " + selectedItemId); // Display the item ID in jLabel11
        populateCompanyComboBox();  // Populate the company combo box
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        cboxMType = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtReason = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cboxCompany = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        txtSentDt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel11.setText("Selected Item ID");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, -1, -1));

        cboxMType.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        cboxMType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Repair", "Upgrade", "Service" }));
        cboxMType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxMTypeItemStateChanged(evt);
            }
        });
        getContentPane().add(cboxMType, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 260, -1));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel2.setText("Reason");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 230, -1, -1));

        txtReason.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        txtReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReasonActionPerformed(evt);
            }
        });
        txtReason.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtReasonKeyReleased(evt);
            }
        });
        getContentPane().add(txtReason, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 260, -1));

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel5.setText("Company");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, -1, -1));

        cboxCompany.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        cboxCompany.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxCompanyItemStateChanged(evt);
            }
        });
        getContentPane().add(cboxCompany, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 310, 260, -1));

        jLabel10.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel10.setText("Sent Date [YYYY-MM-DD]");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, -1, -1));

        txtSentDt.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        txtSentDt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSentDtKeyReleased(evt);
            }
        });
        getContentPane().add(txtSentDt, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 370, 260, -1));

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Book", 1, 36)); // NOI18N
        jLabel1.setText("Maintenance Out Form");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, -1, -1));

        btnReset.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        btnReset.setText("Submit");
        btnReset.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 470, 90, -1));

        btnClose.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 470, 90, -1));

        jLabel12.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel12.setText("Maintenance Type");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 170, -1, -1));

        jLabel13.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel13.setText("Item ID:");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 120, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/New/Background.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateCompanyComboBox() {
        cboxCompany.removeAllItems();  // Clear existing items
        cboxCompany.addItem("Select"); // Add default option

        try {
            Connection con = ConnectionProvider.getCon();
            String query = "SELECT name FROM source WHERE type = 'Vendor' OR type = 'Workshop'";
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Populate combo box with company names
            while (rs.next()) {
                cboxCompany.addItem(rs.getString("name"));
            }

            rs.close();
            pst.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error populating company combo box: " + e.getMessage());
        }
    }

    private void cboxMTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxMTypeItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_cboxMTypeItemStateChanged

    private void txtReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReasonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReasonActionPerformed

    private void txtReasonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReasonKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReasonKeyReleased

    private void cboxCompanyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxCompanyItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        }
    }//GEN-LAST:event_cboxCompanyItemStateChanged

    private void txtSentDtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSentDtKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSentDtKeyReleased

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:                                       

        // Validate that all fields are filled
        if (cboxMType.getSelectedIndex() == -1 || txtReason.getText().trim().isEmpty()
                || cboxCompany.getSelectedIndex() == -1 || txtSentDt.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }

        try {
            // Prepare data for insertion
            String maintenanceType = cboxMType.getSelectedItem().toString();
            String reason = txtReason.getText().trim();
            String companyId = cboxCompany.getSelectedItem().toString();
            String sentDate = txtSentDt.getText().trim();

            // Insert the record into the maintenance_out table
            Connection con = ConnectionProvider.getCon();
            String maintenanceOutQuery = "INSERT INTO maintenance_out (item_id, type, reason, company_id, sentForRepairDate) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement pst = con.prepareStatement(maintenanceOutQuery, PreparedStatement.RETURN_GENERATED_KEYS);
            pst.setInt(1, Integer.parseInt(selectedItemId)); // Use the passed item ID
            pst.setString(2, maintenanceType);
            pst.setString(3, reason);
            pst.setString(4, companyId);
            pst.setDate(5, java.sql.Date.valueOf(sentDate)); // Ensure the date is in YYYY-MM-DD format
            pst.executeUpdate();

            // Get the generated maintenance ID for further use if needed
            ResultSet rs = pst.getGeneratedKeys();
            int maintenanceId = 0;
            if (rs.next()) {
                maintenanceId = rs.getInt(1);
            }

            rs.close();
            pst.close();

            // Step 1: Move the record from assignedTo to assignmentHistory
            String getAssignedRecordQuery = "SELECT * FROM assignedTo WHERE item_id = ?";
            PreparedStatement getAssignedRecordStmt = con.prepareStatement(getAssignedRecordQuery);
            getAssignedRecordStmt.setInt(1, Integer.parseInt(selectedItemId));
            ResultSet assignedRs = getAssignedRecordStmt.executeQuery();

            if (assignedRs.next()) {
                String serNo = assignedRs.getString("ser_no");
                String assignedEmployee = assignedRs.getString("assigned_employee");
                String assignedDivision = assignedRs.getString("assigned_division");
                String assignedOffice = assignedRs.getString("assigned_office");
                String purpose = assignedRs.getString("purpose");
                java.sql.Date assignedDate = assignedRs.getDate("assignedDate");

                // Insert the record into assignmentHistory with the returnDate set as the maintenance out date
                String insertHistoryQuery = "INSERT INTO assignmentHistory (item_id, ser_no, assigned_employee, assigned_division, assigned_office, purpose, assignedDate, returnDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement insertHistoryStmt = con.prepareStatement(insertHistoryQuery);
                insertHistoryStmt.setInt(1, Integer.parseInt(selectedItemId));
                insertHistoryStmt.setString(2, serNo);
                insertHistoryStmt.setString(3, assignedEmployee);
                insertHistoryStmt.setString(4, assignedDivision);
                insertHistoryStmt.setString(5, assignedOffice);
                insertHistoryStmt.setString(6, purpose);
                insertHistoryStmt.setDate(7, assignedDate);
                insertHistoryStmt.setDate(8, java.sql.Date.valueOf(sentDate)); // Set the maintenance out date as the return date
                insertHistoryStmt.executeUpdate();
                insertHistoryStmt.close();
            }

            assignedRs.close();
            getAssignedRecordStmt.close();

            // Step 2: Update assignedTo to mark the item as assigned to "Maintenance Out"
            String updateAssignedToQuery = "UPDATE assignedTo SET assigned_employee = ?, assigned_division = ?, assigned_office = ?, purpose = ? WHERE item_id = ?";
            PreparedStatement updateAssignedToStmt = con.prepareStatement(updateAssignedToQuery);
            updateAssignedToStmt.setString(1, "Maintenance Out");
            updateAssignedToStmt.setString(2, null); // No specific division
            updateAssignedToStmt.setString(3, null); // No specific office
            updateAssignedToStmt.setString(4, "Maintenance - " + maintenanceType); // Set purpose as maintenance type
            updateAssignedToStmt.setInt(5, Integer.parseInt(selectedItemId));
            updateAssignedToStmt.executeUpdate();
            updateAssignedToStmt.close();

            con.close();

            JOptionPane.showMessageDialog(this, "Record added and assignment updated successfully.");

            // Close the form
            
            dispose();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error processing maintenance out: " + e.getMessage());
        }


    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Provide a sample item ID if needed for testing
                new Maintenance_Out_Form("1").setVisible(true);  // Replace "1" with a valid item ID or make it dynamic
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> cboxCompany;
    private javax.swing.JComboBox<String> cboxMType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtReason;
    private javax.swing.JTextField txtSentDt;
    // End of variables declaration//GEN-END:variables
}
