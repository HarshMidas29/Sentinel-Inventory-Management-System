/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SIMS.Maintenance;

import dao.ConnectionProvider;
import SIMS.Menus.Maintenance_Menu;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daham Yakandawala
 */
public class Maintain_Out extends javax.swing.JFrame {

    private String selectedID;

    /**
     * Creates new form Maintain_Out1
     */
    public Maintain_Out() {

        initComponents();
        setLocationRelativeTo(null);
        populateCurrentAssignmentTable();
        populateCategoryComboBox();
        populateOfficerComboBox();
        populateDivComboBox();
        populateOfficeComboBox();
        populateItemIDComboBox();
    }

    private void populateCategoryComboBox() {
        cboxCategory.removeAllItems();
        cboxCategory.addItem("Select");
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(
                    "SELECT DISTINCT it.category "
                    + "FROM item it "
                    + "JOIN assignedTo at ON it.id = at.item_id"
            );
            while (rs.next()) {
                cboxCategory.addItem(rs.getString("category"));
            }
            rs.close();
            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void populateItemIDComboBox() {
        cboxItemID.removeAllItems();
        cboxItemID.addItem("Select");
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT DISTINCT item_id FROM assignedTo");
            while (rs.next()) {
                cboxItemID.addItem(rs.getString("item_id"));
            }
            rs.close();
            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void populateOfficerComboBox() {
        cboxEmployee.removeAllItems();
        cboxEmployee.addItem("Select");
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT DISTINCT assigned_employee FROM assignedTo");
            while (rs.next()) {
                cboxEmployee.addItem(rs.getString("assigned_employee"));
            }
            rs.close();
            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void populateDivComboBox() {
        cboxDiv.removeAllItems();
        cboxDiv.addItem("Select");
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT DISTINCT assigned_division FROM assignedTo");
            while (rs.next()) {
                cboxDiv.addItem(rs.getString("assigned_division"));
            }
            rs.close();
            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void populateOfficeComboBox() {
        cboxOffice.removeAllItems();
        cboxOffice.addItem("Select");
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT DISTINCT assigned_office FROM assignedTo");
            while (rs.next()) {
                cboxOffice.addItem(rs.getString("assigned_office"));
            }
            rs.close();
            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CurrentAssignmentTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboxCategory = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cboxItemID = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        cboxEmployee = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        cboxDiv = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        cboxOffice = new javax.swing.JComboBox<>();
        btnAddItem = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Book", 1, 36)); // NOI18N
        jLabel1.setText("Assigned Items");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, -1, -1));

        CurrentAssignmentTable.setFont(new java.awt.Font("Franklin Gothic Book", 0, 12)); // NOI18N
        CurrentAssignmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Type", "Assigned Employee", "Assigned Div / Sec / Proj", "Assigned Office"
            }
        ));
        CurrentAssignmentTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        CurrentAssignmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CurrentAssignmentTableMouseClicked(evt);
            }
        });
        CurrentAssignmentTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                CurrentAssignmentTableComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(CurrentAssignmentTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 700, 630));

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Book", 1, 36)); // NOI18N
        jLabel3.setText("Select Item");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 50, -1, -1));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel2.setText("Item Type");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 120, -1, -1));

        cboxCategory.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        cboxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Laptop", "Monitor", "Desktop", "Printer", "Scanner", "Photocopy" }));
        cboxCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxCategoryItemStateChanged(evt);
            }
        });
        getContentPane().add(cboxCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 140, 330, -1));

        jLabel8.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel8.setText("Item ID");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 180, -1, -1));

        cboxItemID.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        cboxItemID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Laptop", "Monitor", "Desktop", "Printer", "Scanner", "Photocopy" }));
        cboxItemID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxItemIDItemStateChanged(evt);
            }
        });
        getContentPane().add(cboxItemID, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 200, 330, -1));

        jLabel13.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel13.setText("Assigned Employee");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 240, -1, -1));

        cboxEmployee.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        cboxEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        cboxEmployee.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxEmployeeItemStateChanged(evt);
            }
        });
        getContentPane().add(cboxEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 260, 330, -1));

        jLabel14.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel14.setText("Assigned Division / Section / Project");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 300, -1, -1));

        cboxDiv.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        cboxDiv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        cboxDiv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxDivItemStateChanged(evt);
            }
        });
        getContentPane().add(cboxDiv, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 320, 330, -1));

        jLabel15.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel15.setText("Assigned Office");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 360, -1, -1));

        cboxOffice.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        cboxOffice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        cboxOffice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxOfficeItemStateChanged(evt);
            }
        });
        getContentPane().add(cboxOffice, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 380, 330, -1));

        btnAddItem.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        btnAddItem.setText("Select");
        btnAddItem.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 620, 80, -1));

        btnReset.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 620, 80, -1));

        btnClose.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 680, 80, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/New/1.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CurrentAssignmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CurrentAssignmentTableMouseClicked
        // TODO add your handling code here:                                             
        int selectedRow = CurrentAssignmentTable.getSelectedRow(); // Get the selected row index
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) CurrentAssignmentTable.getModel();

            // Extract values from the selected row
            
            String itemId = model.getValueAt(selectedRow, 0).toString();
            String itemType = model.getValueAt(selectedRow, 1).toString();
            String assignedEmployee = model.getValueAt(selectedRow, 2).toString();
            String assignedDivision = model.getValueAt(selectedRow, 3).toString();
            String assignedOffice = model.getValueAt(selectedRow, 4).toString();

            // Set the combo box values to match the selected row
            cboxCategory.setSelectedItem(itemType);
            cboxItemID.setSelectedItem(itemId);
            cboxEmployee.setSelectedItem(assignedEmployee);
            cboxDiv.setSelectedItem(assignedDivision);
            cboxOffice.setSelectedItem(assignedOffice);
            selectedID = itemId;
        }

    }//GEN-LAST:event_CurrentAssignmentTableMouseClicked

    private void cboxCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxCategoryItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxCategoryItemStateChanged

    private void cboxItemIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxItemIDItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxItemIDItemStateChanged

    private void cboxEmployeeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxEmployeeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxEmployeeItemStateChanged

    private void cboxDivItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxDivItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxDivItemStateChanged

    private void cboxOfficeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxOfficeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxOfficeItemStateChanged

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        // TODO add your handling code here:

        int selectedRow = CurrentAssignmentTable.getSelectedRow();
        if (selectedRow >= 0) {
            String itemId = CurrentAssignmentTable.getValueAt(selectedRow, 0).toString(); // Get the item ID
            new Maintenance_Out_Form(itemId).setVisible(true); // Pass item ID to the new form
        } else {
            JOptionPane.showMessageDialog(this, "Please select an item from the table.");
        }

    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Maintain_Out().setVisible(true);
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        new Maintenance_Menu().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void CurrentAssignmentTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_CurrentAssignmentTableComponentShown
        // TODO add your handling code here:

    }//GEN-LAST:event_CurrentAssignmentTableComponentShown

    private void populateCurrentAssignmentTable() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Join the assignedTo table with the item table to get the item_type
            // Exclude items where assigned_employee is set to "Maintenance Out"
            ResultSet rs = st.executeQuery(
                    "SELECT assignedTo.item_id, item.category AS item_type, "
                    + "assignedTo.assigned_employee, assignedTo.assigned_division, "
                    + "assignedTo.assigned_office, assignedTo.purpose, assignedTo.assignedDate "
                    + "FROM assignedTo "
                    + "JOIN item ON assignedTo.item_id = item.id "
                    + "WHERE assignedTo.assigned_employee != 'Maintenance Out'"
            );

            DefaultTableModel model = (DefaultTableModel) CurrentAssignmentTable.getModel();
            model.setRowCount(0);  // Clear existing rows

            while (rs.next()) {
                int itemId = rs.getInt("item_id");
                
                String itemType = rs.getString("item_type");  // Get item_type from the item table
                String assignedEmployee = rs.getString("assigned_employee");
                String assignedDivision = rs.getString("assigned_division");
                String assignedOffice = rs.getString("assigned_office");
                String purpose = rs.getString("purpose");
                Date assignedDate = rs.getDate("assignedDate");

                model.addRow(new Object[]{itemId,  itemType, assignedEmployee, assignedDivision, assignedOffice, purpose, assignedDate});
            }

            rs.close();
            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Maintain_Out.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Maintain_Out.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Maintain_Out.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Maintain_Out.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Maintain_Out().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CurrentAssignmentTable;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> cboxCategory;
    private javax.swing.JComboBox<String> cboxDiv;
    private javax.swing.JComboBox<String> cboxEmployee;
    private javax.swing.JComboBox<String> cboxItemID;
    private javax.swing.JComboBox<String> cboxOffice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
