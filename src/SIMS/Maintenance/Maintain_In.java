/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SIMS.Maintenance;

import dao.ConnectionProvider;
import SIMS.Menus.Maintenance_Menu;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daham Yakandawala
 */
public class Maintain_In extends javax.swing.JFrame {

    private String selectedID;

    /**
     * Creates new form Maintain_Out1
     */
    public Maintain_In() {

        initComponents();
        setLocationRelativeTo(null);
        populateCurrentAssignmentTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CurrentAssignmentTable = new javax.swing.JTable();
        btnReset = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCompleteDate = new javax.swing.JTextField();
        btnReset1 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtRepairWarrantyEndDate = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Book", 1, 36)); // NOI18N
        jLabel1.setText("Items In Maintenance");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        CurrentAssignmentTable.setFont(new java.awt.Font("Franklin Gothic Book", 0, 12)); // NOI18N
        CurrentAssignmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Maintenance ID", "Item ID", "Item Type", "Maintenance Type", "Sent Date", "Company"
            }
        ));
        CurrentAssignmentTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        CurrentAssignmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CurrentAssignmentTableMouseClicked(evt);
            }
        });
        CurrentAssignmentTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                CurrentAssignmentTableComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(CurrentAssignmentTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 710, 580));

        btnReset.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 450, 80, -1));

        btnClose.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 680, 80, -1));

        jLabel13.setFont(new java.awt.Font("Franklin Gothic Book", 1, 18)); // NOI18N
        jLabel13.setText("Maintenance ID:");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 130, -1, -1));

        jLabel11.setFont(new java.awt.Font("Franklin Gothic Book", 1, 18)); // NOI18N
        jLabel11.setText("Select Item ID");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 130, -1, -1));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel2.setText("Remarks");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 310, 110, -1));

        txtRemarks.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        txtRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRemarksActionPerformed(evt);
            }
        });
        txtRemarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRemarksKeyReleased(evt);
            }
        });
        getContentPane().add(txtRemarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 330, 320, -1));

        jLabel10.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel10.setText("Complete Date ");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 190, 140, -1));

        txtCompleteDate.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        txtCompleteDate.setText("[YYYY-MM-DD]");
        txtCompleteDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCompleteDateKeyReleased(evt);
            }
        });
        getContentPane().add(txtCompleteDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 210, 320, -1));

        btnReset1.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        btnReset1.setText("Submit");
        btnReset1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnReset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReset1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 450, 90, -1));

        jLabel16.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel16.setText("Repair Warranty End Date ");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 250, 200, -1));

        txtRepairWarrantyEndDate.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        txtRepairWarrantyEndDate.setText("[YYYY-MM-DD]");
        txtRepairWarrantyEndDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRepairWarrantyEndDateKeyReleased(evt);
            }
        });
        getContentPane().add(txtRepairWarrantyEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 270, 320, -1));

        txtPrice.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        txtPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceActionPerformed(evt);
            }
        });
        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPriceKeyReleased(evt);
            }
        });
        getContentPane().add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 390, 320, -1));

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Book", 1, 12)); // NOI18N
        jLabel3.setText("Price");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 370, 90, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/New/1.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CurrentAssignmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CurrentAssignmentTableMouseClicked
        // TODO add your handling code here:                                             

        int selectedRow = CurrentAssignmentTable.getSelectedRow(); // Get the selected row index
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) CurrentAssignmentTable.getModel();

            // Get the selected item's item ID and set it in jLabel11
            String maintenanceId = model.getValueAt(selectedRow, 0).toString(); // Column 1 holds the item_id
            jLabel11.setText(maintenanceId);
        }


    }//GEN-LAST:event_CurrentAssignmentTableMouseClicked

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Maintain_In().setVisible(true);
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        new Maintenance_Menu().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void CurrentAssignmentTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_CurrentAssignmentTableComponentShown
        // TODO add your handling code here:

    }//GEN-LAST:event_CurrentAssignmentTableComponentShown

    private void txtRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRemarksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRemarksActionPerformed

    private void txtRemarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRemarksKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRemarksKeyReleased

    private void txtCompleteDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompleteDateKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCompleteDateKeyReleased

    private void btnReset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReset1ActionPerformed
        // TODO add your handling code here:

        // Validate that all fields are filled
        if (txtCompleteDate.getText().trim().isEmpty() || txtRepairWarrantyEndDate.getText().trim().isEmpty()
                || txtRemarks.getText().trim().isEmpty() || txtPrice.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }

        try {
            Connection con = ConnectionProvider.getCon();

            // Retrieve values from the form
            String completeDate = txtCompleteDate.getText().trim();
            String warrantyEndDate = txtRepairWarrantyEndDate.getText().trim();
            String price = txtPrice.getText().trim();
            String remarksIn = txtRemarks.getText().trim();
            int maintenanceId = Integer.parseInt(CurrentAssignmentTable.getValueAt(CurrentAssignmentTable.getSelectedRow(), 0).toString());
            int itemId = Integer.parseInt(CurrentAssignmentTable.getValueAt(CurrentAssignmentTable.getSelectedRow(), 1).toString());

            // Fetch existing remarks from the maintenance_out table
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT remarks FROM maintenance_out WHERE maintenance_id = " + maintenanceId);
            rs.close();
            st.close();

            // Concatenate remarks from maintenance_out and maintenance_in forms
            String concatenatedRemarks = remarksIn;

            // Insert a new record into the maintenance_in table
            String query = "INSERT INTO maintenance_in (maintenance_id, item_id, type, reason, company_id, sentForRepairDate, RepairCompleteDate, repair_warranty, remarks, price) "
                    + "SELECT maintenance_id, item_id, type, reason, company_id, sentForRepairDate, ?, ?, ?, ? FROM maintenance_out WHERE maintenance_id = ?";

            PreparedStatement pst = con.prepareStatement(query);
            pst.setDate(1, java.sql.Date.valueOf(completeDate));
            pst.setString(2, warrantyEndDate);
            pst.setString(3, concatenatedRemarks);
            pst.setString(4, price);
            pst.setInt(5, maintenanceId);
            pst.executeUpdate();
            pst.close();

            // Copy details from assignedTo to assignmentHistory
            String copyToHistoryQuery = "INSERT INTO assignmentHistory (item_id, ser_no, assigned_employee, assigned_division, assigned_office, purpose, assignedDate, returnDate) "
                    + "SELECT item_id, ser_no, assigned_employee, assigned_division, assigned_office, purpose, assignedDate, ? FROM assignedTo WHERE item_id = ?";

            PreparedStatement copyToHistoryStmt = con.prepareStatement(copyToHistoryQuery);
            copyToHistoryStmt.setDate(1, java.sql.Date.valueOf(completeDate)); // Set returnDate as complete date
            copyToHistoryStmt.setInt(2, itemId);
            copyToHistoryStmt.executeUpdate();
            copyToHistoryStmt.close();

            // Delete the record from maintenance_out table
            String deleteOutQuery = "DELETE FROM maintenance_out WHERE maintenance_id = ?";
            PreparedStatement deleteOutStmt = con.prepareStatement(deleteOutQuery);
            deleteOutStmt.setInt(1, maintenanceId);
            deleteOutStmt.executeUpdate();
            deleteOutStmt.close();

            // Delete the record from assignedTo table
            String deleteAssignedQuery = "DELETE FROM assignedTo WHERE item_id = ?";
            PreparedStatement deleteAssignedStmt = con.prepareStatement(deleteAssignedQuery);
            deleteAssignedStmt.setInt(1, itemId);
            deleteAssignedStmt.executeUpdate();
            deleteAssignedStmt.close();

            // Notify the user
            JOptionPane.showMessageDialog(this, "Maintenance Completion Recorded and Assignment Updated");

            // Optionally, refresh or reset the form/table
            populateCurrentAssignmentTable(); // Refresh the table to remove the deleted entry
            jLabel11.setText("Select Item ID"); // Reset the selected item ID label
            txtCompleteDate.setText("[YYYY-MM-DD]");
            txtRepairWarrantyEndDate.setText("[YYYY-MM-DD]");
            txtRemarks.setText("");
            txtPrice.setText("");

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error processing maintenance record: " + e.getMessage());
        }

    }//GEN-LAST:event_btnReset1ActionPerformed

    private void txtRepairWarrantyEndDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRepairWarrantyEndDateKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRepairWarrantyEndDateKeyReleased

    private void txtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceActionPerformed

    private void txtPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceKeyReleased

    private void populateCurrentAssignmentTable() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Join the maintenance_out table with the item table to get item details and company_id
            ResultSet rs = st.executeQuery(
                    "SELECT mo.maintenance_id, mo.item_id, item.category AS item_type, "
                    + "mo.type AS maintenance_type, mo.sentForRepairDate, mo.company_id "
                    + "FROM maintenance_out mo "
                    + "JOIN item ON mo.item_id = item.id"
            );

            DefaultTableModel model = (DefaultTableModel) CurrentAssignmentTable.getModel();
            model.setRowCount(0);  // Clear existing rows

            // Populate the table with data from the result set, including company_id
            while (rs.next()) {
                int maintenanceId = rs.getInt("maintenance_id");
                int itemId = rs.getInt("item_id");
                String itemType = rs.getString("item_type");  // Item category from the item table
                String maintenanceType = rs.getString("maintenance_type"); // Maintenance type
                Date sentDate = rs.getDate("sentForRepairDate");  // Date the item was sent for repair
                String companyId = rs.getString("company_id");  // Get the company ID

                model.addRow(new Object[]{maintenanceId, itemId, itemType, maintenanceType, sentDate, companyId});
            }

            rs.close();
            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error loading data: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Maintain_In.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Maintain_In.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Maintain_In.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Maintain_In.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Maintain_In().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CurrentAssignmentTable;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnReset1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCompleteDate;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtRepairWarrantyEndDate;
    // End of variables declaration//GEN-END:variables
}
